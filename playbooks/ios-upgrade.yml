---
- hosts: "{{ host_list }}"
  gather_facts: no
  connection: local

  tasks:

  - name: obtain login credentials
    include_vars: ../secrets.yml

  - name: define provider
    set_fact:
      provider:
        host: "{{ inventory_hostname }}"
        username: "{{ creds['username'] }}"
        password: "{{ creds['password'] }}"
        auth_pass: "{{ creds['auth_pass'] }}"
        transport: cli

  - include: ../tasks/cisco-platform-check.yml

  - name: assume upgraded needed
    set_fact:
      upgraded_needed: true

  - name: determine suggested upgrade version
    include_vars: "../vars/{{ item }}"
    with_items:
      - "{{ cisco_model }}.yml"

  - debug: var=cisco_upgrade_version

  - name: determine current image name
    set_fact:
      existing_image_name: "{{ ansible_net_image | regex_replace('^.*:/?(.*)$', '\\1') }}"

  - debug: var=existing_image_name

  - name: perform extra check when image name contains packages.conf
    local_action: "shell echo {{ cisco_upgrade_version }} {{ cisco_version }} | awk -f ../scripts/cisco-iosxe-version-match.awk"
    register: shorthand
    when: existing_image_name.count('packages.conf') > 0

  - name: set shorthand of cisco upgrade version
    set_fact:
      shorthand_cisco_upgrade_version: "{{ shorthand.stdout_lines[0] }}"
    when: existing_image_name.count('packages.conf') > 0

  - debug: var=shorthand_cisco_upgrade_version

  - name: determine whether upgrade necessary
    set_fact:
      upgrade_needed: "{{ cisco_upgrade_version != existing_image_name }}"
    when: shorthand_cisco_upgrade_version is undefined

  - name: determine whether upgrade necessary when image name contains packages.conf
    set_fact:
      upgrade_needed: "{{ shorthand_cisco_upgrade_version != cisco_version }}"
    when: shorthand_cisco_upgrade_version is defined

  - debug: var=upgrade_needed

  - name: determine software destination
    set_fact:
      image_destination: "{{ ansible_net_image | regex_replace('^(.*:).*$', '\\1') }}"

  - debug: var=image_destination

  - name: ensure ios running configuration is written to startup
    local_action: "shell ../scripts/ios-copy-run-start.py {{ inventory_hostname }} {{ creds['username'] }} {{ creds['password'] }} 1"
    changed_when: false
    when: cisco_platform == 'ios' and upgrade_needed
    register: result
    # failed_when is not working for some reason - everything succeeds
    failed_when: "result.stdout[0].count('OK') > 10"
    tags: backup

  - debug: var=result

  - name: ensure iosxe running configuration is written to startup
    local_action: "shell ../scripts/ios-copy-run-start.py {{ inventory_hostname }} {{ creds['username'] }} {{ creds['password'] }} 1"
    changed_when: false
    when: cisco_platform == 'iosxe' and upgrade_needed
    register: result
    # failed_when is not working for some reason - everything succeeds
    failed_when: "result.stdout[0].count('OK') > 10"
    tags: backup

  - debug: var=result

  - name: ensure nxos configuration is written to startup
    local_action: "shell ../scripts/ios-copy-run-start.py {{ inventory_hostname }} {{ creds['username'] }} {{ creds['password'] }} 1"
    changed_when: false
    when: cisco_platform == 'nxos' and upgrade_needed
    register: result_nxos
    # failed_when is not working for some reason - everything succeeds
    failed_when: result_nxos.stdout[0].count('#') > 0
    tags: backup

  - debug: var=result

  - name: "convert 3850 bundle mode to install mode"
    local_action: "shell ../scripts/iosxe-software-expand.py {{ inventory_hostname }} {{ creds['username'] }} {{ creds['password'] }} 1 {{ image_destination }}"
    #ios_command:
      #commands:
        #"software expand running to {{ image_destination }} verbose"
      #provider: "{{ provider }}"
    register: expand
    when: cisco_platform == 'iosxe' and upgrade_needed and existing_image_name.count('packages.conf') < 1

  - debug: var=expand

  #- name: back up configuration
    #ntc_save_config:
      #platform: cisco_ios_ssh
      #host: "{{ inventory_hostname }}"
      #username: "{{ creds['username'] }}"
      #password: "{{ creds['password'] }}"
      #local_file: "{{ inventory_hostname }}.cfg"
    #register: result
    #tags: backup

  #- debug: var=result

  - debug: var=cisco_upgrade_version
  - debug: var=image_destination

  - name: copy new ios image to device
    ntc_file_copy:
      platform: cisco_ios_ssh
      local_file: "../../ios/{{ cisco_upgrade_version }}"
      file_system: "{{ image_destination }}"
      host: "{{ inventory_hostname }}"
      username: "{{ creds['username'] }}"
      password: "{{ creds['password'] }}"
    register: ntc_copy
    when: cisco_platform == 'ios' and upgrade_needed

  - name: copy new iosxe image to device
    ntc_file_copy:
      platform: cisco_ios_ssh
      local_file: "../../ios/{{ cisco_upgrade_version }}"
      file_system: "{{ image_destination }}"
      host: "{{ inventory_hostname }}"
      username: "{{ creds['username'] }}"
      password: "{{ creds['password'] }}"
    register: ntc_copy
    when: cisco_platform == 'iosxe' and upgrade_needed

  - debug: var=ntc_copy

  - name: set boot variable
    ntc_install_os:
      platform: cisco_ios_ssh
      #system_image_file: "{{ image_destination }}:{{ cisco_upgrade_version }}"
      system_image_file: "{{ cisco_upgrade_version }}"
      host: "{{ inventory_hostname }}"
      username: "{{ creds['username'] }}"
      password: "{{ creds['password'] }}"
    register: ntc_install
    when: cisco_platform == 'ios' and upgrade_needed and image_destination == 'flash:' and cisco_model.count('WS-C3750') < 1

  - name: "install image on 3750 ios device"
    ios_command:
      commands:
        - "archive download-sw {{ image_destination }}{{ cisco_upgrade_version }}"
      provider: "{{ provider }}"
    register: result
    when: cisco_platform == 'ios' and upgrade_needed and cisco_model.count('WS-C3750') > 0
      
  - debug: var=result

  - name: "install image on 3650 iosxe device"
    local_action: "shell ../scripts/iosxe-software-install-file.py {{ inventory_hostname }} {{ creds['username'] }} {{ creds['password'] }} 40 {{ image_destination }} {{ cisco_upgrade_version }}"
    register: result
    #failed_when: result.stdout[0].count('Fail') > 0
    when: cisco_platform == 'iosxe' and upgrade_needed and cisco_model.count('WS-C3650') > 0
      
  - debug: var=result

  - name: "install image on 3850 iosxe device"
    local_action: "shell ../scripts/iosxe-software-install-file.py {{ inventory_hostname }} {{ creds['username'] }} {{ creds['password'] }} 40 {{ image_destination }} {{ cisco_upgrade_version }}"
    register: result
    when: cisco_platform == 'iosxe' and upgrade_needed and cisco_model.count('WS-C3850') > 0

  - debug: var=result


  #- name: reload device
...
